[  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Intellenum (https://github.com/SteveDunn/Intellenum)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618
// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036
// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097
// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669
#pragma warning disable CS1573
// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591
using Intellenum;
using System;

namespace SomethingElse
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Intellenum", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetVoSystemTextJsonConverter))]
    [global::System.ComponentModel.TypeConverter(typeof(DateTimeOffsetVoTypeConverter))]
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(DateTimeOffsetVoDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.DateTimeOffset, Value = { _value }")]
    public partial class DateTimeOffsetVo : global::System.IEquatable<DateTimeOffsetVo>, global::System.IComparable, global::System.IComparable<DateTimeOffsetVo>
    {
        private static readonly System.Lazy<System.Collections.Generic.Dictionary<string, DateTimeOffsetVo>> _namesToEnums = new(() => new() { { "JanFirst", JanFirst }, });
        private static readonly System.Lazy<System.Collections.Generic.Dictionary<System.DateTimeOffset, DateTimeOffsetVo>> _valuesToEnums = new(() => new() { { JanFirst.Value, JanFirst }, });
#if DEBUG
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
        private readonly global::System.Boolean _isInitialized;
        private readonly System.DateTimeOffset _value;
        private readonly global::System.String _name;
        /// <summary>
        /// Gets the underlying <see cref = "System.DateTimeOffset"/> value if set, otherwise default
        /// </summary>
        public System.DateTimeOffset Value => _value;

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public DateTimeOffsetVo()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
            _isInitialized = false;
            _value = default;
            _name = "[UNDEFINED]";
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        public DateTimeOffsetVo(System.DateTimeOffset value)
        {
            _value = value;
            _name = "[INFERRED-TO-BE-REPLACED!]";
            _isInitialized = true;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private DateTimeOffsetVo(string enumName, System.DateTimeOffset value)
        {
            _value = value;
            _name = enumName;
            _isInitialized = true;
        }

        public global::System.String Name => _name;

        public void Deconstruct(out string Name, out System.DateTimeOffset Value)
        {
            Name = this._name;
            Value = this._value;
        }

        /// <summary>
        /// Builds a member from an enum value.
        /// </summary>
        /// <param name = "value">The value.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static DateTimeOffsetVo FromValue(System.DateTimeOffset value)
        {
            bool b = _valuesToEnums.Value.TryGetValue(value, out var ret);
            if (b)
                return ret;
            ThrowHelper.ThrowMatchFailed("DateTimeOffsetVo has no matching members with a value of '{value}'");
            return default;
        }

        /// <summary>
        /// Tries to get a member based on value.
        /// </summary>
        /// <param name = "value">The value.</param>
        /// <param name = "member">The matching member if successful.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static bool TryFromValue(System.DateTimeOffset value, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
        out DateTimeOffsetVo member)
        {
            return _valuesToEnums.Value.TryGetValue(value, out member);
        }

        /// <summary>
        /// Determines if there is a member that is defined with the specified value.
        /// </summary>
        /// <param name = "value">The value to search for.</param>
        /// <returns>True if there is a member with matching value, otherwise False.</returns>
        public static bool IsDefined(System.DateTimeOffset value)
        {
            return _valuesToEnums.Value.TryGetValue(value, out _);
        }

#region .NET Framework Compatability Methods
        /// <summary>
        /// Gets the matching member based on name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static DateTimeOffsetVo FromName(string name)
        {
            return FromName(name.AsSpan());
        }

        /// <summary>
        /// Tries to get the matching member from a name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "member">The matching member if successful.</param>
        /// <returns>The matching enum, or an exception.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool TryFromName(string name, out DateTimeOffsetVo member)
        {
            return TryFromName(name.AsSpan(), out member);
        }

        [global::System.ObsoleteAttribute("Please use IsNameDefined rather than this, which has a typo")]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool IsNamedDefined(string name)
        {
            return IsNamedDefined(name.AsSpan());
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool IsNameDefined(string name)
        {
            return IsNameDefined(name.AsSpan());
        }

#endregion
        /// <summary>
        /// Gets the matching member based on name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static DateTimeOffsetVo FromName(ReadOnlySpan<char> name)
        {
            bool b = TryFromName(name, out var ret);
            if (b)
                return ret;
            throw new IntellenumMatchFailedException($"DateTimeOffsetVo has no matching members named '{name.ToString()}'");
        }

        /// <summary>
        /// Tries to get the matching member from a name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "member">The matching member if successful.</param>
        /// <returns>The matching enum, or an exception.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool TryFromName(ReadOnlySpan<char> name, out DateTimeOffsetVo member)
        {
            foreach (var key in _namesToEnums.Value.Keys)
            {
#if NETCOREAPP
    if(!name.Equals(key, global::System.StringComparison.Ordinal))
#else
                if (!name.SequenceEqual(key.AsSpan()))
#endif
                {
                    continue;
                }

                member = _namesToEnums.Value[key];
                return true;
            }

            member = default(DateTimeOffsetVo);
            return false;
        }

        [global::System.ObsoleteAttribute("Please use IsNameDefined rather than this, which has a typo")]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool IsNamedDefined(ReadOnlySpan<char> name)
        {
            return TryFromName(name, out _);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool IsNameDefined(ReadOnlySpan<char> name)
        {
            return TryFromName(name, out _);
        }

        // A placeholder method used by the source generator during compilation so that
        // users can 'Call' it. The source generator examines calls to this in order to 
        // generate physical members (e.g. public static readonly MyEnum Item1 = new...)
        private static void Member(string name, System.DateTimeOffset value)
        {
        }

        // only called internally when something has been deserialized into
        // its primitive type.
        private static DateTimeOffsetVo __Deserialize(System.DateTimeOffset value)
        {
            if (value == JanFirst.Value)
                return JanFirst;
            return FromValue(value);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public global::System.Boolean Equals(DateTimeOffsetVo other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized members via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized members of this type.
            if (!_isInitialized || !other._isInitialized)
                return false;
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<System.DateTimeOffset>.Default.Equals(Value, other.Value);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public override global::System.Boolean Equals(global::System.Object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DateTimeOffsetVo)obj);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator ==(DateTimeOffsetVo left, DateTimeOffsetVo right) => Equals(left, right);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator !=(DateTimeOffsetVo left, DateTimeOffsetVo right) => !Equals(left, right);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator ==(DateTimeOffsetVo left, System.DateTimeOffset right) => Equals(left.Value, right);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator !=(DateTimeOffsetVo left, System.DateTimeOffset right) => !Equals(left.Value, right);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator ==(System.DateTimeOffset left, DateTimeOffsetVo right) => Equals(left, right.Value);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator !=(System.DateTimeOffset left, DateTimeOffsetVo right) => !Equals(left, right.Value);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static explicit operator DateTimeOffsetVo(System.DateTimeOffset value) => FromValue(value);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static implicit operator System.DateTimeOffset(DateTimeOffsetVo value) => value.Value;
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public int CompareTo(DateTimeOffsetVo other) => Value.CompareTo(other);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator <(DateTimeOffsetVo left, DateTimeOffsetVo right) => left.CompareTo(right) < 0;
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator <=(DateTimeOffsetVo left, DateTimeOffsetVo right) => left.CompareTo(right) <= 0;
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator>(DateTimeOffsetVo left, DateTimeOffsetVo right) => left.CompareTo(right) > 0;
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator >=(DateTimeOffsetVo left, DateTimeOffsetVo right) => left.CompareTo(right) >= 0;
        public int CompareTo(object other)
        {
            if (other is null)
                return 1;
            if (other is DateTimeOffsetVo x)
                return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type DateTimeOffsetVo", nameof(other));
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public override global::System.Int32 GetHashCode() => GetType().GetHashCode() ^ this._value.GetHashCode();
        // member...
        public static readonly DateTimeOffsetVo JanFirst = new DateTimeOffsetVo("JanFirst", new DateTimeOffset(2019, 1, 1, 14, 15, 16, TimeSpan.Zero).AddTicks(123));
        public static global::System.Collections.Generic.IEnumerable<DateTimeOffsetVo> List()
        {
            yield return JanFirst;
        }

        /// <summary>Returns the name of the enum.</summary>
        public override global::System.String ToString() => _name;
        /// <summary>
        /// Converts an Intellenum instance to or from JSON.
        /// </summary>
        public class DateTimeOffsetVoSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<DateTimeOffsetVo>
        {
            public override DateTimeOffsetVo Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return DateTimeOffsetVo.__Deserialize(reader.GetDateTimeOffset());
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, DateTimeOffsetVo value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteStringValue(value.Value);
            }
#if NET6_0_OR_GREATER
            public override DateTimeOffsetVo ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return DateTimeOffsetVo.__Deserialize(global::System.DateTimeOffset.ParseExact(reader.GetString(), "O", global::System.Globalization.CultureInfo.InvariantCulture));
            }

            public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, DateTimeOffsetVo value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WritePropertyName(value.Value.ToString("O"));
            }
#endif
        }

        class DateTimeOffsetVoTypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override global::System.Boolean CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.DateTimeOffset) || sourceType == typeof(global::System.String) || base.CanConvertFrom(context, sourceType);
            }

            public override global::System.Object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value)
            {
                return value switch
                {
                    global::System.String stringValue when !global::System.String.IsNullOrEmpty(stringValue) && global::System.DateTimeOffset.TryParseExact(stringValue, "O", global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.RoundtripKind, out var result) => DateTimeOffsetVo.__Deserialize(result),
                    global::System.DateTimeOffset dateTimeValue => DateTimeOffsetVo.__Deserialize(dateTimeValue),
                    _ => base.ConvertFrom(context, culture, value),
                };
            }

            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.DateTimeOffset) || sourceType == typeof(global::System.String) || base.CanConvertTo(context, sourceType);
            }

            public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value, global::System.Type destinationType)
            {
                if (value is DateTimeOffsetVo idValue)
                {
                    if (destinationType == typeof(global::System.DateTimeOffset))
                    {
                        return idValue.Value;
                    }

                    if (destinationType == typeof(global::System.String))
                    {
                        return idValue.Value.ToString("O");
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }

        /// <inheritdoc cref = "System.DateTimeOffset.TryParse(string, out System.DateTimeOffset)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created via the <see cref = "TryFromValue"/> method.
        /// </returns>
        public static global::System.Boolean TryParse(string input, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
        out DateTimeOffsetVo result)
        {
            if (System.DateTimeOffset.TryParse(input, out var r))
            {
                return TryFromValue(r, out result);
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "System.DateTimeOffset.TryParse(string, System.IFormatProvider, System.Globalization.DateTimeStyles, out System.DateTimeOffset)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created via the <see cref = "TryFromValue"/> method.
        /// </returns>
        public static global::System.Boolean TryParse(string input, global::System.IFormatProvider formatProvider, global::System.Globalization.DateTimeStyles styles, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
        out DateTimeOffsetVo result)
        {
            if (System.DateTimeOffset.TryParse(input, formatProvider, styles, out var r))
            {
                return TryFromValue(r, out result);
            }

            result = default;
            return false;
        }

        internal sealed class DateTimeOffsetVoDebugView
        {
            private readonly DateTimeOffsetVo _t;
            DateTimeOffsetVoDebugView(DateTimeOffsetVo t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "System.DateTimeOffset";
            public System.DateTimeOffset Value => _t.Value;
            public global::System.String Conversions => @"[global::System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetVoSystemTextJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(DateTimeOffsetVoTypeConverter))]
";
        }

        internal static class ThrowHelper
        {
            internal static void ThrowCreatedWithNull() => throw new IntellenumCreationFailedException("Cannot create an Intellenum member with a null.");
            internal static void ThrowMatchFailed(string message) => throw new IntellenumMatchFailedException(message);
            internal static void ThrowMatchFailed(ReadOnlySpan<char> message) => throw new IntellenumMatchFailedException(message.ToString());
        }
    }
}
]