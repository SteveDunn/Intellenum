[  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Intellenum (https://github.com/SteveDunn/Intellenum)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618
// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036
// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097
// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669
#pragma warning disable CS1573
// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591
using Intellenum;
using System;

[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Intellenum", "1.0.0.0")]
[global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(MyVoDebugView))]
[global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.Int32, Value = { _value }")]
public partial class MyVo : global::System.IEquatable<MyVo>, global::System.IComparable, global::System.IComparable<MyVo>
{
    // const fields...
    public const System.Int32 Item1Value = 1;
    public const System.Int32 Item2Value = 2;
#if DEBUG
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
    private readonly global::System.Boolean _isInitialized;
    private readonly System.Int32 _value;
    private readonly global::System.String _name;
    private static class __Inner
    {
        public static int __ComeAlive() => 42;
        static __Inner()
        {
            global::ServiceStack.Text.JsConfig<MyVo>.DeSerializeFn = v => MyVo.FromName(v);
            global::ServiceStack.Text.JsConfig<MyVo>.SerializeFn = v => v.Name;
        }
    }

    private static readonly int __discard = __Inner.__ComeAlive();
    /// <summary>
    /// Gets the underlying <see cref = "System.Int32"/> value if set, otherwise default
    /// </summary>
    public System.Int32 Value => _value;

    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public MyVo()
    {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
        _isInitialized = false;
        _value = default;
        _name = "[UNDEFINED]";
    }

    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    public MyVo(System.Int32 value)
    {
        _value = value;
        _name = "[INFERRED-TO-BE-REPLACED!]";
        _isInitialized = true;
    }

    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    private MyVo(string enumName, System.Int32 value)
    {
        _value = value;
        _name = enumName;
        _isInitialized = true;
    }

    public global::System.String Name => _name;

    public void Deconstruct(out string Name, out System.Int32 Value)
    {
        Name = this._name;
        Value = this._value;
    }

    /// <summary>
    /// Builds a member from an enum value.
    /// </summary>
    /// <param name = "value">The value.</param>
    /// <returns>The matching enum, or an exception.</returns>
    public static MyVo FromValue(System.Int32 value)
    {
        bool b = TryFromValue(value, out var ret);
        if (b)
        {
            return ret;
        }

        throw new IntellenumMatchFailedException($"MyVo has no matching members with a value of '{value}'");
    }

    /// <summary>
    /// Tries to get a member based on value.
    /// </summary>
    /// <param name = "value">The value.</param>
    /// <param name = "member">The matching member if successful.</param>
    /// <returns>The matching enum, or an exception.</returns>
    public static bool TryFromValue(System.Int32 value, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
    out MyVo member)
    {
        switch (value)
        {
            case 1:
                member = MyVo.Item1;
                return true;
            case 2:
                member = MyVo.Item2;
                return true;
            default:
                member = default;
                return false;
        }
    }

    /// <summary>
    /// Determines if there is a member that is defined with the specified value.
    /// </summary>
    /// <param name = "value">The value to search for.</param>
    /// <returns>True if there is a member with matching value, otherwise False.</returns>
    public static bool IsDefined(System.Int32 value)
    {
        return value switch
        {
            1 => true,
            2 => true,
            _ => false
        };
    }

    /// <summary>
    /// Gets the matching member based on name.
    /// </summary>
    /// <param name = "name">The name.</param>
    /// <returns>The matching enum, or an exception.</returns>
    public static MyVo FromName(System.String name)
    {
        if (TryFromName(name, out var ret))
        {
            return ret;
        }

        ThrowHelper.ThrowMatchFailed($"MyVo has no matching members named '{name}'");
        return default;
    }

    /// <summary>
    /// Gets the matching member based on name.
    /// </summary>
    /// <param name = "name">The name.</param>
    /// <param name = "ignoreCase"><c>true</c> to convert <paramref name = "name"/> in case insensitive mode; <c>false</c> to convert <paramref name = "name"/> in case sensitive mode.</param>
    /// <returns>The matching enum, or an exception.</returns>
    public static MyVo FromName(System.String name, bool ignoreCase)
    {
        StringComparison comparisonType = ignoreCase ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture;
        if (TryFromName(name, comparisonType, out var ret))
        {
            return ret;
        }

        ThrowHelper.ThrowMatchFailed($"MyVo has no matching members named '{name}'");
        return default;
    }

    /// <summary>
    /// Gets the matching member based on name.
    /// </summary>
    /// <param name = "name">The name.</param>
    /// <param name = "comparisonType">Comparison type to compare strings for equality during search.</param>
    /// <returns>The matching enum, or an exception.</returns>
    public static MyVo FromName(System.String name, StringComparison comparisonType)
    {
        if (TryFromName(name, comparisonType, out var ret))
        {
            return ret;
        }

        ThrowHelper.ThrowMatchFailed($"MyVo has no matching members named '{name}'");
        return default;
    }

    /// <summary>
    /// Tries to get the matching member from a name.
    /// </summary>
    /// <param name = "name">The name.</param>
    /// <param name = "member">The matching member if successful.</param>
    /// <returns>True if found, otherwise false.</returns>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool TryFromName(System.String name, out MyVo member)
    {
        switch (name)
        {
            case ("Item1"):
                member = MyVo.Item1;
                return true;
            case ("Item2"):
                member = MyVo.Item2;
                return true;
            default:
                member = default;
                return false;
        }
    }

    /// <summary>
    /// Tries to get the matching member from a name.
    /// </summary>
    /// <param name = "name">The name.</param>
    /// <param name = "member">The matching member if successful.</param>
    /// <returns>True if found, otherwise false.</returns>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool TryFromName(System.String name, bool ignoreCase, out MyVo member)
    {
        StringComparison comparisonType = ignoreCase ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture;
        if (string.Equals(name, "Item1", comparisonType))
        {
            member = MyVo.Item1;
            return true;
        }

        if (string.Equals(name, "Item2", comparisonType))
        {
            member = MyVo.Item2;
            return true;
        }

        member = default;
        return false;
    }

    /// <summary>
    /// Tries to get the matching member from a name.
    /// </summary>
    /// <param name = "name">The name.</param>
    /// <param name = "member">The matching member if successful.</param>
    /// <returns>True if found, otherwise false.</returns>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool TryFromName(System.String name, StringComparison comparisonType, out MyVo member)
    {
        if (string.Equals(name, "Item1", comparisonType))
        {
            member = MyVo.Item1;
            return true;
        }

        if (string.Equals(name, "Item2", comparisonType))
        {
            member = MyVo.Item2;
            return true;
        }

        member = default;
        return false;
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool IsNameDefined(System.String name)
    {
        return TryFromName(name, out _);
    }

    /// <summary>
    /// Gets the matching member based on name.
    /// </summary>
    /// <param name = "name">The name.</param>
    /// <returns>The matching enum, or an exception.</returns>
    public static MyVo FromName(System.ReadOnlySpan<char> name)
    {
        if (TryFromName(name, out var ret))
        {
            return ret;
        }

        ThrowHelper.ThrowMatchFailed($"MyVo has no matching members named '{name.ToString()}'");
        return default;
    }

    /// <summary>
    /// Gets the matching member based on name.
    /// </summary>
    /// <param name = "name">The name.</param>
    /// <param name = "ignoreCase"><c>true</c> to convert <paramref name = "name"/> in case insensitive mode; <c>false</c> to convert <paramref name = "name"/> in case sensitive mode.</param>
    /// <returns>The matching enum, or an exception.</returns>
    public static MyVo FromName(System.ReadOnlySpan<char> name, bool ignoreCase)
    {
        StringComparison comparisonType = ignoreCase ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture;
        if (TryFromName(name, comparisonType, out var ret))
        {
            return ret;
        }

        ThrowHelper.ThrowMatchFailed($"MyVo has no matching members named '{name.ToString()}'");
        return default;
    }

    /// <summary>
    /// Gets the matching member based on name.
    /// </summary>
    /// <param name = "name">The name.</param>
    /// <param name = "comparisonType">Comparison type to compare strings for equality during search.</param>
    /// <returns>The matching enum, or an exception.</returns>
    public static MyVo FromName(System.ReadOnlySpan<char> name, StringComparison comparisonType)
    {
        if (TryFromName(name, comparisonType, out var ret))
        {
            return ret;
        }

        ThrowHelper.ThrowMatchFailed($"MyVo has no matching members named '{name.ToString()}'");
        return default;
    }

    /// <summary>
    /// Tries to get the matching member from a name.
    /// </summary>
    /// <param name = "name">The name.</param>
    /// <param name = "member">The matching member if successful.</param>
    /// <returns>True if found, otherwise false.</returns>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool TryFromName(System.ReadOnlySpan<char> name, out MyVo member)
    {
        switch (name)
        {
            case ("Item1"):
                member = MyVo.Item1;
                return true;
            case ("Item2"):
                member = MyVo.Item2;
                return true;
            default:
                member = default;
                return false;
        }
    }

    /// <summary>
    /// Tries to get the matching member from a name.
    /// </summary>
    /// <param name = "name">The name.</param>
    /// <param name = "member">The matching member if successful.</param>
    /// <returns>True if found, otherwise false.</returns>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool TryFromName(System.ReadOnlySpan<char> name, bool ignoreCase, out MyVo member)
    {
        StringComparison comparisonType = ignoreCase ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture;
        if (MemoryExtensions.Equals(name, "Item1".AsSpan(), comparisonType))
        {
            member = MyVo.Item1;
            return true;
        }

        if (MemoryExtensions.Equals(name, "Item2".AsSpan(), comparisonType))
        {
            member = MyVo.Item2;
            return true;
        }

        member = default;
        return false;
    }

    /// <summary>
    /// Tries to get the matching member from a name.
    /// </summary>
    /// <param name = "name">The name.</param>
    /// <param name = "member">The matching member if successful.</param>
    /// <returns>True if found, otherwise false.</returns>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool TryFromName(System.ReadOnlySpan<char> name, StringComparison comparisonType, out MyVo member)
    {
        if (MemoryExtensions.Equals(name, "Item1".AsSpan(), comparisonType))
        {
            member = MyVo.Item1;
            return true;
        }

        if (MemoryExtensions.Equals(name, "Item2".AsSpan(), comparisonType))
        {
            member = MyVo.Item2;
            return true;
        }

        member = default;
        return false;
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool IsNameDefined(System.ReadOnlySpan<char> name)
    {
        return TryFromName(name, out _);
    }

    // A placeholder method used by the source generator during compilation so that
    // users can 'Call' it. The source generator examines calls to this in order to 
    // generate physical members (e.g. public static readonly MyEnum Item1 = new...)
    private static void Member(string name, System.Int32 value)
    {
    }

    // A placeholder method used by the source generator during compilation so that
    // users can 'Call' it. The source generator examines calls to this in order to 
    // generate physical members (e.g. public static readonly MyEnum Item1 = new...)
    private static void Member(string name)
    {
    }

    // A placeholder method used by the source generator during compilation so that
    // users can 'Call' it. The source generator examines calls to this in order to 
    // generate physical members (e.g. public static readonly MyEnum Item1 = new...)
    /// <summary>
    /// Sets up members using just the name. For ints, the values are 0 to n, and for strings,
    /// the values are the names. 
    /// The input is a comma separated string, e.g. ""Silver, Gold, Diamond"". The individual
    /// items are trimmed of whitespace. 
    /// </summary>
    private static void Members(string csv)
    {
    }

    // only called internally when something has been deserialized into
    // its primitive type.
    private static MyVo __Deserialize(System.Int32 value)
    {
        if (value == Item1.Value)
            return Item1;
        if (value == Item2.Value)
            return Item2;
        return FromValue(value);
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public global::System.Boolean Equals(MyVo other)
    {
        if (ReferenceEquals(null, other))
        {
            return false;
        }

        // It's possible to create uninitialized members via converters such as EfCore (HasDefaultValue), which call Equals.
        // We treat anything uninitialized as not equal to anything, even other uninitialized members of this type.
        if (!_isInitialized || !other._isInitialized)
            return false;
        if (ReferenceEquals(this, other))
        {
            return true;
        }

        return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<System.Int32>.Default.Equals(Value, other.Value);
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public override global::System.Boolean Equals(global::System.Object obj)
    {
        if (ReferenceEquals(null, obj))
        {
            return false;
        }

        if (ReferenceEquals(this, obj))
        {
            return true;
        }

        if (obj.GetType() != GetType())
        {
            return false;
        }

        return Equals((MyVo)obj);
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static global::System.Boolean operator ==(MyVo left, MyVo right) => Equals(left, right);
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static global::System.Boolean operator !=(MyVo left, MyVo right) => !Equals(left, right);
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static global::System.Boolean operator ==(MyVo left, System.Int32 right) => Equals(left.Value, right);
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static global::System.Boolean operator !=(MyVo left, System.Int32 right) => !Equals(left.Value, right);
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static global::System.Boolean operator ==(System.Int32 left, MyVo right) => Equals(left, right.Value);
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static global::System.Boolean operator !=(System.Int32 left, MyVo right) => !Equals(left, right.Value);
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static explicit operator MyVo(System.Int32 value) => FromValue(value);
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static implicit operator System.Int32(MyVo value) => value.Value;
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public int CompareTo(MyVo other) => Value.CompareTo(other);
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static global::System.Boolean operator <(MyVo left, MyVo right) => left.CompareTo(right) < 0;
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static global::System.Boolean operator <=(MyVo left, MyVo right) => left.CompareTo(right) <= 0;
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static global::System.Boolean operator>(MyVo left, MyVo right) => left.CompareTo(right) > 0;
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static global::System.Boolean operator >=(MyVo left, MyVo right) => left.CompareTo(right) >= 0;
    public int CompareTo(object other)
    {
        if (other is null)
            return 1;
        if (other is MyVo x)
            return CompareTo(x);
        throw new global::System.ArgumentException("Cannot compare to object as it is not of type MyVo", nameof(other));
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public override global::System.Int32 GetHashCode() => GetType().GetHashCode() ^ this._value.GetHashCode();
    // member...
    public static readonly MyVo Item1 = new MyVo("Item1", 1);
    // member...
    public static readonly MyVo Item2 = new MyVo("Item2", 2);
    public static global::System.Collections.Generic.IEnumerable<MyVo> List()
    {
        yield return Item1;
        yield return Item2;
    }

    /// <summary>Returns the name of the enum.</summary>
    public override global::System.String ToString() => _name;
    /// <inheritdoc cref = "int.TryParse(System.ReadOnlySpan{byte}, System.Globalization.NumberStyles, System.IFormatProvider? , out int)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref = "TryFromValue"/> method.
    /// </returns>
    public static global::System.Boolean TryParse(global::System.ReadOnlySpan<byte> utf8Text, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
    out MyVo result)
    {
        if (System.Int32.TryParse(utf8Text, style, provider, out var r))
        {
            return TryFromValue(r, out result);
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref = "int.TryParse(System.ReadOnlySpan{byte}, System.IFormatProvider? , out int)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref = "TryFromValue"/> method.
    /// </returns>
    public static global::System.Boolean TryParse(global::System.ReadOnlySpan<byte> utf8Text, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
    out MyVo result)
    {
        if (System.Int32.TryParse(utf8Text, provider, out var r))
        {
            return TryFromValue(r, out result);
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref = "int.TryParse(System.ReadOnlySpan{byte}, out int)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref = "TryFromValue"/> method.
    /// </returns>
    public static global::System.Boolean TryParse(global::System.ReadOnlySpan<byte> utf8Text, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
    out MyVo result)
    {
        if (System.Int32.TryParse(utf8Text, out var r))
        {
            return TryFromValue(r, out result);
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref = "int.TryParse(System.ReadOnlySpan{char}, System.Globalization.NumberStyles, System.IFormatProvider? , out int)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref = "TryFromValue"/> method.
    /// </returns>
    public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
    out MyVo result)
    {
        if (System.Int32.TryParse(s, style, provider, out var r))
        {
            return TryFromValue(r, out result);
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref = "int.TryParse(System.ReadOnlySpan{char}, System.IFormatProvider? , out int)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref = "TryFromValue"/> method.
    /// </returns>
    public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
    out MyVo result)
    {
        if (System.Int32.TryParse(s, provider, out var r))
        {
            return TryFromValue(r, out result);
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref = "int.TryParse(System.ReadOnlySpan{char}, out int)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref = "TryFromValue"/> method.
    /// </returns>
    public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
    out MyVo result)
    {
        if (System.Int32.TryParse(s, out var r))
        {
            return TryFromValue(r, out result);
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref = "int.TryParse(string? , System.Globalization.NumberStyles, System.IFormatProvider? , out int)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref = "TryFromValue"/> method.
    /// </returns>
    public static global::System.Boolean TryParse(string s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
    out MyVo result)
    {
        if (System.Int32.TryParse(s, style, provider, out var r))
        {
            return TryFromValue(r, out result);
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref = "int.TryParse(string? , System.IFormatProvider? , out int)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref = "TryFromValue"/> method.
    /// </returns>
    public static global::System.Boolean TryParse(string s, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
    out MyVo result)
    {
        if (System.Int32.TryParse(s, provider, out var r))
        {
            return TryFromValue(r, out result);
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref = "int.TryParse(string? , out int)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref = "TryFromValue"/> method.
    /// </returns>
    public static global::System.Boolean TryParse(string s, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
    out MyVo result)
    {
        if (System.Int32.TryParse(s, out var r))
        {
            return TryFromValue(r, out result);
        }

        result = default;
        return false;
    }

    internal sealed class MyVoDebugView
    {
        private readonly MyVo _t;
        MyVoDebugView(MyVo t)
        {
            _t = t;
        }

        public global::System.String UnderlyingType => "System.Int32";
        public System.Int32 Value => _t.Value;
        public global::System.String Conversions => @"";
    }

    internal static class ThrowHelper
    {
        internal static void ThrowCreatedWithNull() => throw new IntellenumCreationFailedException("Cannot create an Intellenum member with a null.");
        internal static void ThrowMatchFailed(string message) => throw new IntellenumMatchFailedException(message);
        internal static void ThrowMatchFailed(ReadOnlySpan<char> message) => throw new IntellenumMatchFailedException(message.ToString());
    }
}
]