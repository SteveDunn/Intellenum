[  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Intellenum (https://github.com/SteveDunn/Intellenum)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618
// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036
// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097
// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669
#pragma warning disable CS1573
// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591
using Intellenum;
using System;

namespace Whatever
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Intellenum", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(MixtureSystemTextJsonConverter))]
    [global::System.ComponentModel.TypeConverter(typeof(MixtureTypeConverter))]
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(MixtureDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.Int32, Value = { _value }")]
    public partial class Mixture : global::System.IEquatable<Mixture>, global::System.IComparable, global::System.IComparable<Mixture>
    {
        // const fields...
        public const System.Int32 FourValue = 0;
        public const System.Int32 FiveValue = 1;
        public const System.Int32 SixValue = 2;
        public const System.Int32 ZeroValue = 3;
        public const System.Int32 OneValue = 4;
        public const System.Int32 TwoValue = 5;
        public const System.Int32 ThreeValue = 6;
        public const System.Int32 NineValue = 7;
        public const System.Int32 TenValue = 8;
        public const System.Int32 ThirteenValue = 9;
        public const System.Int32 ElevenValue = 10;
        public const System.Int32 TwelveValue = 11;
        public const System.Int32 SevenValue = 12;
        public const System.Int32 EightValue = 888;
#if DEBUG
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
        private global::System.Boolean _isInitialized;
        private System.Int32 _value;
        private global::System.String _name;
        private static class __Inner
        {
            public static int __ComeAlive() => 42;
            static __Inner()
            {
                Nine._name = "Nine";
                Ten._name = "Ten";
                Thirteen._name = "Thirteen";
                Seven._name = "Seven";
                Seven._value = 12;
                Seven._isInitialized = true;
                Eight._name = "Eight";
            }
        }

        private static readonly int __discard = __Inner.__ComeAlive();
        /// <summary>
        /// Gets the underlying <see cref = "System.Int32"/> value if set, otherwise default
        /// </summary>
        public System.Int32 Value => _value;

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Mixture()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
            _isInitialized = false;
            _value = default;
            _name = "[UNDEFINED]";
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        public Mixture(System.Int32 value)
        {
            _value = value;
            _name = "[INFERRED-TO-BE-REPLACED!]";
            _isInitialized = true;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private Mixture(string enumName, System.Int32 value)
        {
            _value = value;
            _name = enumName;
            _isInitialized = true;
        }

        public global::System.String Name => _name;

        public void Deconstruct(out string Name, out System.Int32 Value)
        {
            Name = this._name;
            Value = this._value;
        }

        /// <summary>
        /// Builds a member from an enum value.
        /// </summary>
        /// <param name = "value">The value.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static Mixture FromValue(System.Int32 value)
        {
            bool b = TryFromValue(value, out var ret);
            if (b)
            {
                return ret;
            }

            throw new IntellenumMatchFailedException($"Mixture has no matching members with a value of '{value}'");
        }

        /// <summary>
        /// Tries to get a member based on value.
        /// </summary>
        /// <param name = "value">The value.</param>
        /// <param name = "member">The matching member if successful.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static bool TryFromValue(System.Int32 value, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
        out Mixture member)
        {
            switch (value)
            {
                case 0:
                    member = Mixture.Four;
                    return true;
                case 1:
                    member = Mixture.Five;
                    return true;
                case 2:
                    member = Mixture.Six;
                    return true;
                case 3:
                    member = Mixture.Zero;
                    return true;
                case 4:
                    member = Mixture.One;
                    return true;
                case 5:
                    member = Mixture.Two;
                    return true;
                case 6:
                    member = Mixture.Three;
                    return true;
                case 7:
                    member = Mixture.Nine;
                    return true;
                case 8:
                    member = Mixture.Ten;
                    return true;
                case 9:
                    member = Mixture.Thirteen;
                    return true;
                case 10:
                    member = Mixture.Eleven;
                    return true;
                case 11:
                    member = Mixture.Twelve;
                    return true;
                case 12:
                    member = Mixture.Seven;
                    return true;
                case 888:
                    member = Mixture.Eight;
                    return true;
                default:
                    member = default;
                    return false;
            }
        }

        /// <summary>
        /// Determines if there is a member that is defined with the specified value.
        /// </summary>
        /// <param name = "value">The value to search for.</param>
        /// <returns>True if there is a member with matching value, otherwise False.</returns>
        public static bool IsDefined(System.Int32 value)
        {
            return value switch
            {
                0 => true,
                1 => true,
                2 => true,
                3 => true,
                4 => true,
                5 => true,
                6 => true,
                7 => true,
                8 => true,
                9 => true,
                10 => true,
                11 => true,
                12 => true,
                888 => true,
                _ => false
            };
        }

        /// <summary>
        /// Gets the matching member based on name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static Mixture FromName(System.String name)
        {
            if (TryFromName(name, out var ret))
            {
                return ret;
            }

            ThrowHelper.ThrowMatchFailed($"Mixture has no matching members named '{name}'");
            return default;
        }

        /// <summary>
        /// Gets the matching member based on name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "ignoreCase"><c>true</c> to convert <paramref name = "name"/> in case insensitive mode; <c>false</c> to convert <paramref name = "name"/> in case sensitive mode.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static Mixture FromName(System.String name, bool ignoreCase)
        {
            StringComparison comparisonType = ignoreCase ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture;
            if (TryFromName(name, comparisonType, out var ret))
            {
                return ret;
            }

            ThrowHelper.ThrowMatchFailed($"Mixture has no matching members named '{name}'");
            return default;
        }

        /// <summary>
        /// Gets the matching member based on name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "comparisonType">Comparison type to compare strings for equality during search.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static Mixture FromName(System.String name, StringComparison comparisonType)
        {
            if (TryFromName(name, comparisonType, out var ret))
            {
                return ret;
            }

            ThrowHelper.ThrowMatchFailed($"Mixture has no matching members named '{name}'");
            return default;
        }

        /// <summary>
        /// Tries to get the matching member from a name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "member">The matching member if successful.</param>
        /// <returns>True if found, otherwise false.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool TryFromName(System.String name, out Mixture member)
        {
            switch (name)
            {
                case ("Four"):
                    member = Mixture.Four;
                    return true;
                case ("Five"):
                    member = Mixture.Five;
                    return true;
                case ("Six"):
                    member = Mixture.Six;
                    return true;
                case ("Zero"):
                    member = Mixture.Zero;
                    return true;
                case ("One"):
                    member = Mixture.One;
                    return true;
                case ("Two"):
                    member = Mixture.Two;
                    return true;
                case ("Three"):
                    member = Mixture.Three;
                    return true;
                case ("Nine"):
                    member = Mixture.Nine;
                    return true;
                case ("Ten"):
                    member = Mixture.Ten;
                    return true;
                case ("Thirteen"):
                    member = Mixture.Thirteen;
                    return true;
                case ("Eleven"):
                    member = Mixture.Eleven;
                    return true;
                case ("Twelve"):
                    member = Mixture.Twelve;
                    return true;
                case ("Seven"):
                    member = Mixture.Seven;
                    return true;
                case ("Eight"):
                    member = Mixture.Eight;
                    return true;
                default:
                    member = default;
                    return false;
            }
        }

        /// <summary>
        /// Tries to get the matching member from a name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "member">The matching member if successful.</param>
        /// <returns>True if found, otherwise false.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool TryFromName(System.String name, bool ignoreCase, out Mixture member)
        {
            StringComparison comparisonType = ignoreCase ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture;
            if (string.Equals(name, "Four", comparisonType))
            {
                member = Mixture.Four;
                return true;
            }

            if (string.Equals(name, "Five", comparisonType))
            {
                member = Mixture.Five;
                return true;
            }

            if (string.Equals(name, "Six", comparisonType))
            {
                member = Mixture.Six;
                return true;
            }

            if (string.Equals(name, "Zero", comparisonType))
            {
                member = Mixture.Zero;
                return true;
            }

            if (string.Equals(name, "One", comparisonType))
            {
                member = Mixture.One;
                return true;
            }

            if (string.Equals(name, "Two", comparisonType))
            {
                member = Mixture.Two;
                return true;
            }

            if (string.Equals(name, "Three", comparisonType))
            {
                member = Mixture.Three;
                return true;
            }

            if (string.Equals(name, "Nine", comparisonType))
            {
                member = Mixture.Nine;
                return true;
            }

            if (string.Equals(name, "Ten", comparisonType))
            {
                member = Mixture.Ten;
                return true;
            }

            if (string.Equals(name, "Thirteen", comparisonType))
            {
                member = Mixture.Thirteen;
                return true;
            }

            if (string.Equals(name, "Eleven", comparisonType))
            {
                member = Mixture.Eleven;
                return true;
            }

            if (string.Equals(name, "Twelve", comparisonType))
            {
                member = Mixture.Twelve;
                return true;
            }

            if (string.Equals(name, "Seven", comparisonType))
            {
                member = Mixture.Seven;
                return true;
            }

            if (string.Equals(name, "Eight", comparisonType))
            {
                member = Mixture.Eight;
                return true;
            }

            member = default;
            return false;
        }

        /// <summary>
        /// Tries to get the matching member from a name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "member">The matching member if successful.</param>
        /// <returns>True if found, otherwise false.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool TryFromName(System.String name, StringComparison comparisonType, out Mixture member)
        {
            if (string.Equals(name, "Four", comparisonType))
            {
                member = Mixture.Four;
                return true;
            }

            if (string.Equals(name, "Five", comparisonType))
            {
                member = Mixture.Five;
                return true;
            }

            if (string.Equals(name, "Six", comparisonType))
            {
                member = Mixture.Six;
                return true;
            }

            if (string.Equals(name, "Zero", comparisonType))
            {
                member = Mixture.Zero;
                return true;
            }

            if (string.Equals(name, "One", comparisonType))
            {
                member = Mixture.One;
                return true;
            }

            if (string.Equals(name, "Two", comparisonType))
            {
                member = Mixture.Two;
                return true;
            }

            if (string.Equals(name, "Three", comparisonType))
            {
                member = Mixture.Three;
                return true;
            }

            if (string.Equals(name, "Nine", comparisonType))
            {
                member = Mixture.Nine;
                return true;
            }

            if (string.Equals(name, "Ten", comparisonType))
            {
                member = Mixture.Ten;
                return true;
            }

            if (string.Equals(name, "Thirteen", comparisonType))
            {
                member = Mixture.Thirteen;
                return true;
            }

            if (string.Equals(name, "Eleven", comparisonType))
            {
                member = Mixture.Eleven;
                return true;
            }

            if (string.Equals(name, "Twelve", comparisonType))
            {
                member = Mixture.Twelve;
                return true;
            }

            if (string.Equals(name, "Seven", comparisonType))
            {
                member = Mixture.Seven;
                return true;
            }

            if (string.Equals(name, "Eight", comparisonType))
            {
                member = Mixture.Eight;
                return true;
            }

            member = default;
            return false;
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool IsNameDefined(System.String name)
        {
            return TryFromName(name, out _);
        }

        /// <summary>
        /// Gets the matching member based on name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static Mixture FromName(System.ReadOnlySpan<char> name)
        {
            if (TryFromName(name, out var ret))
            {
                return ret;
            }

            ThrowHelper.ThrowMatchFailed($"Mixture has no matching members named '{name.ToString()}'");
            return default;
        }

        /// <summary>
        /// Gets the matching member based on name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "ignoreCase"><c>true</c> to convert <paramref name = "name"/> in case insensitive mode; <c>false</c> to convert <paramref name = "name"/> in case sensitive mode.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static Mixture FromName(System.ReadOnlySpan<char> name, bool ignoreCase)
        {
            StringComparison comparisonType = ignoreCase ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture;
            if (TryFromName(name, comparisonType, out var ret))
            {
                return ret;
            }

            ThrowHelper.ThrowMatchFailed($"Mixture has no matching members named '{name.ToString()}'");
            return default;
        }

        /// <summary>
        /// Gets the matching member based on name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "comparisonType">Comparison type to compare strings for equality during search.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static Mixture FromName(System.ReadOnlySpan<char> name, StringComparison comparisonType)
        {
            if (TryFromName(name, comparisonType, out var ret))
            {
                return ret;
            }

            ThrowHelper.ThrowMatchFailed($"Mixture has no matching members named '{name.ToString()}'");
            return default;
        }

        /// <summary>
        /// Tries to get the matching member from a name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "member">The matching member if successful.</param>
        /// <returns>True if found, otherwise false.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool TryFromName(System.ReadOnlySpan<char> name, out Mixture member)
        {
            switch (name)
            {
                case ("Four"):
                    member = Mixture.Four;
                    return true;
                case ("Five"):
                    member = Mixture.Five;
                    return true;
                case ("Six"):
                    member = Mixture.Six;
                    return true;
                case ("Zero"):
                    member = Mixture.Zero;
                    return true;
                case ("One"):
                    member = Mixture.One;
                    return true;
                case ("Two"):
                    member = Mixture.Two;
                    return true;
                case ("Three"):
                    member = Mixture.Three;
                    return true;
                case ("Nine"):
                    member = Mixture.Nine;
                    return true;
                case ("Ten"):
                    member = Mixture.Ten;
                    return true;
                case ("Thirteen"):
                    member = Mixture.Thirteen;
                    return true;
                case ("Eleven"):
                    member = Mixture.Eleven;
                    return true;
                case ("Twelve"):
                    member = Mixture.Twelve;
                    return true;
                case ("Seven"):
                    member = Mixture.Seven;
                    return true;
                case ("Eight"):
                    member = Mixture.Eight;
                    return true;
                default:
                    member = default;
                    return false;
            }
        }

        /// <summary>
        /// Tries to get the matching member from a name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "member">The matching member if successful.</param>
        /// <returns>True if found, otherwise false.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool TryFromName(System.ReadOnlySpan<char> name, bool ignoreCase, out Mixture member)
        {
            StringComparison comparisonType = ignoreCase ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture;
            if (MemoryExtensions.Equals(name, "Four".AsSpan(), comparisonType))
            {
                member = Mixture.Four;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Five".AsSpan(), comparisonType))
            {
                member = Mixture.Five;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Six".AsSpan(), comparisonType))
            {
                member = Mixture.Six;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Zero".AsSpan(), comparisonType))
            {
                member = Mixture.Zero;
                return true;
            }

            if (MemoryExtensions.Equals(name, "One".AsSpan(), comparisonType))
            {
                member = Mixture.One;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Two".AsSpan(), comparisonType))
            {
                member = Mixture.Two;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Three".AsSpan(), comparisonType))
            {
                member = Mixture.Three;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Nine".AsSpan(), comparisonType))
            {
                member = Mixture.Nine;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Ten".AsSpan(), comparisonType))
            {
                member = Mixture.Ten;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Thirteen".AsSpan(), comparisonType))
            {
                member = Mixture.Thirteen;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Eleven".AsSpan(), comparisonType))
            {
                member = Mixture.Eleven;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Twelve".AsSpan(), comparisonType))
            {
                member = Mixture.Twelve;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Seven".AsSpan(), comparisonType))
            {
                member = Mixture.Seven;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Eight".AsSpan(), comparisonType))
            {
                member = Mixture.Eight;
                return true;
            }

            member = default;
            return false;
        }

        /// <summary>
        /// Tries to get the matching member from a name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "member">The matching member if successful.</param>
        /// <returns>True if found, otherwise false.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool TryFromName(System.ReadOnlySpan<char> name, StringComparison comparisonType, out Mixture member)
        {
            if (MemoryExtensions.Equals(name, "Four".AsSpan(), comparisonType))
            {
                member = Mixture.Four;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Five".AsSpan(), comparisonType))
            {
                member = Mixture.Five;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Six".AsSpan(), comparisonType))
            {
                member = Mixture.Six;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Zero".AsSpan(), comparisonType))
            {
                member = Mixture.Zero;
                return true;
            }

            if (MemoryExtensions.Equals(name, "One".AsSpan(), comparisonType))
            {
                member = Mixture.One;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Two".AsSpan(), comparisonType))
            {
                member = Mixture.Two;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Three".AsSpan(), comparisonType))
            {
                member = Mixture.Three;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Nine".AsSpan(), comparisonType))
            {
                member = Mixture.Nine;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Ten".AsSpan(), comparisonType))
            {
                member = Mixture.Ten;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Thirteen".AsSpan(), comparisonType))
            {
                member = Mixture.Thirteen;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Eleven".AsSpan(), comparisonType))
            {
                member = Mixture.Eleven;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Twelve".AsSpan(), comparisonType))
            {
                member = Mixture.Twelve;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Seven".AsSpan(), comparisonType))
            {
                member = Mixture.Seven;
                return true;
            }

            if (MemoryExtensions.Equals(name, "Eight".AsSpan(), comparisonType))
            {
                member = Mixture.Eight;
                return true;
            }

            member = default;
            return false;
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool IsNameDefined(System.ReadOnlySpan<char> name)
        {
            return TryFromName(name, out _);
        }

        // A placeholder method used by the source generator during compilation so that
        // users can 'Call' it. The source generator examines calls to this in order to 
        // generate physical members (e.g. public static readonly MyEnum Item1 = new...)
        private static void Member(string name, System.Int32 value)
        {
        }

        // A placeholder method used by the source generator during compilation so that
        // users can 'Call' it. The source generator examines calls to this in order to 
        // generate physical members (e.g. public static readonly MyEnum Item1 = new...)
        private static void Member(string name)
        {
        }

        // A placeholder method used by the source generator during compilation so that
        // users can 'Call' it. The source generator examines calls to this in order to 
        // generate physical members (e.g. public static readonly MyEnum Item1 = new...)
        /// <summary>
        /// Sets up members using just the name. For ints, the values are 0 to n, and for strings,
        /// the values are the names. 
        /// The input is a comma separated string, e.g. ""Silver, Gold, Diamond"". The individual
        /// items are trimmed of whitespace. 
        /// </summary>
        private static void Members(string csv)
        {
        }

        // only called internally when something has been deserialized into
        // its primitive type.
        private static Mixture __Deserialize(System.Int32 value)
        {
            if (value == Four.Value)
                return Four;
            if (value == Five.Value)
                return Five;
            if (value == Six.Value)
                return Six;
            if (value == Zero.Value)
                return Zero;
            if (value == One.Value)
                return One;
            if (value == Two.Value)
                return Two;
            if (value == Three.Value)
                return Three;
            if (value == Nine.Value)
                return Nine;
            if (value == Ten.Value)
                return Ten;
            if (value == Thirteen.Value)
                return Thirteen;
            if (value == Eleven.Value)
                return Eleven;
            if (value == Twelve.Value)
                return Twelve;
            if (value == Seven.Value)
                return Seven;
            if (value == Eight.Value)
                return Eight;
            return FromValue(value);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public global::System.Boolean Equals(Mixture other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized members via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized members of this type.
            if (!_isInitialized || !other._isInitialized)
                return false;
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<System.Int32>.Default.Equals(Value, other.Value);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public override global::System.Boolean Equals(global::System.Object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Mixture)obj);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator ==(Mixture left, Mixture right) => Equals(left, right);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator !=(Mixture left, Mixture right) => !Equals(left, right);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator ==(Mixture left, System.Int32 right) => Equals(left.Value, right);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator !=(Mixture left, System.Int32 right) => !Equals(left.Value, right);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator ==(System.Int32 left, Mixture right) => Equals(left, right.Value);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator !=(System.Int32 left, Mixture right) => !Equals(left, right.Value);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static explicit operator Mixture(System.Int32 value) => FromValue(value);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static implicit operator System.Int32(Mixture value) => value.Value;
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public int CompareTo(Mixture other) => Value.CompareTo(other);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator <(Mixture left, Mixture right) => left.CompareTo(right) < 0;
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator <=(Mixture left, Mixture right) => left.CompareTo(right) <= 0;
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator>(Mixture left, Mixture right) => left.CompareTo(right) > 0;
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator >=(Mixture left, Mixture right) => left.CompareTo(right) >= 0;
        public int CompareTo(object other)
        {
            if (other is null)
                return 1;
            if (other is Mixture x)
                return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type Mixture", nameof(other));
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public override global::System.Int32 GetHashCode() => GetType().GetHashCode() ^ this._value.GetHashCode();
        // member...
        public static readonly Mixture Four = new Mixture("Four", 0);
        // member...
        public static readonly Mixture Five = new Mixture("Five", 1);
        // member...
        public static readonly Mixture Six = new Mixture("Six", 2);
        // member...
        public static readonly Mixture Zero = new Mixture("Zero", 3);
        // member...
        public static readonly Mixture One = new Mixture("One", 4);
        // member...
        public static readonly Mixture Two = new Mixture("Two", 5);
        // member...
        public static readonly Mixture Three = new Mixture("Three", 6);
        // member...
        public static readonly Mixture Nine = new Mixture("Nine", 7);
        // member...
        public static readonly Mixture Ten = new Mixture("Ten", 8);
        // member...
        public static readonly Mixture Thirteen = new Mixture("Thirteen", 9);
        // member...
        public static readonly Mixture Eleven = new Mixture("Eleven", 10);
        // member...
        public static readonly Mixture Twelve = new Mixture("Twelve", 11);
        public static global::System.Collections.Generic.IEnumerable<Mixture> List()
        {
            yield return Four;
            yield return Five;
            yield return Six;
            yield return Zero;
            yield return One;
            yield return Two;
            yield return Three;
            yield return Nine;
            yield return Ten;
            yield return Thirteen;
            yield return Eleven;
            yield return Twelve;
            yield return Seven;
            yield return Eight;
        }

        /// <summary>Returns the name of the enum.</summary>
        public override global::System.String ToString() => _name;
        /// <summary>
        /// Converts an Intellenum instance to or from JSON.
        /// </summary>
        public class MixtureSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<Mixture>
        {
            public override Mixture Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
#if NET5_0_OR_GREATER
                return Mixture.__Deserialize(global::System.Text.Json.JsonSerializer.Deserialize(ref reader, (global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::System.Int32>)options.GetTypeInfo(typeof(global::System.Int32))));
#else
                return Mixture.__Deserialize(reader.GetInt32());
#endif
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, Mixture value, global::System.Text.Json.JsonSerializerOptions options)
            {
#if NET5_0_OR_GREATER
                global::System.Text.Json.JsonSerializer.Serialize(writer, value.Value, options);
#else
                writer.WriteNumberValue(value.Value);
#endif
            }
#if NET6_0_OR_GREATER
            public override Mixture ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return Mixture.__Deserialize(global::System.Int32.Parse(reader.GetString(), global::System.Globalization.NumberStyles.Any, global::System.Globalization.CultureInfo.InvariantCulture));
            }

            public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, Mixture value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WritePropertyName(value.Value.ToString(global::System.Globalization.CultureInfo.InvariantCulture));
            }
#endif
        }

        class MixtureTypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override global::System.Boolean CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Int32) || sourceType == typeof(global::System.String) || base.CanConvertFrom(context, sourceType);
            }

            public override global::System.Object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value)
            {
                return value switch
                {
                    global::System.Int32 intValue => Mixture.__Deserialize(intValue),
                    global::System.String stringValue when !global::System.String.IsNullOrEmpty(stringValue) && global::System.Int32.TryParse(stringValue, out var result) => Mixture.__Deserialize(result),
                    _ => base.ConvertFrom(context, culture, value),
                };
            }

            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Int32) || sourceType == typeof(global::System.String) || base.CanConvertTo(context, sourceType);
            }

            public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value, global::System.Type destinationType)
            {
                if (value is Mixture idValue)
                {
                    if (destinationType == typeof(global::System.Int32))
                    {
                        return idValue.Value;
                    }

                    if (destinationType == typeof(global::System.String))
                    {
                        return idValue.Value.ToString();
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }

        /// <inheritdoc cref = "int.TryParse(System.ReadOnlySpan{byte}, System.Globalization.NumberStyles, System.IFormatProvider? , out int)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created via the <see cref = "TryFromValue"/> method.
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<byte> utf8Text, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
        out Mixture result)
        {
            if (System.Int32.TryParse(utf8Text, style, provider, out var r))
            {
                return TryFromValue(r, out result);
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "int.TryParse(System.ReadOnlySpan{byte}, System.IFormatProvider? , out int)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created via the <see cref = "TryFromValue"/> method.
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<byte> utf8Text, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
        out Mixture result)
        {
            if (System.Int32.TryParse(utf8Text, provider, out var r))
            {
                return TryFromValue(r, out result);
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "int.TryParse(System.ReadOnlySpan{byte}, out int)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created via the <see cref = "TryFromValue"/> method.
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<byte> utf8Text, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
        out Mixture result)
        {
            if (System.Int32.TryParse(utf8Text, out var r))
            {
                return TryFromValue(r, out result);
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "int.TryParse(System.ReadOnlySpan{char}, System.Globalization.NumberStyles, System.IFormatProvider? , out int)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created via the <see cref = "TryFromValue"/> method.
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
        out Mixture result)
        {
            if (System.Int32.TryParse(s, style, provider, out var r))
            {
                return TryFromValue(r, out result);
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "int.TryParse(System.ReadOnlySpan{char}, System.IFormatProvider? , out int)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created via the <see cref = "TryFromValue"/> method.
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
        out Mixture result)
        {
            if (System.Int32.TryParse(s, provider, out var r))
            {
                return TryFromValue(r, out result);
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "int.TryParse(System.ReadOnlySpan{char}, out int)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created via the <see cref = "TryFromValue"/> method.
        /// </returns>
        public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
        out Mixture result)
        {
            if (System.Int32.TryParse(s, out var r))
            {
                return TryFromValue(r, out result);
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "int.TryParse(string? , System.Globalization.NumberStyles, System.IFormatProvider? , out int)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created via the <see cref = "TryFromValue"/> method.
        /// </returns>
        public static global::System.Boolean TryParse(string s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
        out Mixture result)
        {
            if (System.Int32.TryParse(s, style, provider, out var r))
            {
                return TryFromValue(r, out result);
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "int.TryParse(string? , System.IFormatProvider? , out int)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created via the <see cref = "TryFromValue"/> method.
        /// </returns>
        public static global::System.Boolean TryParse(string s, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
        out Mixture result)
        {
            if (System.Int32.TryParse(s, provider, out var r))
            {
                return TryFromValue(r, out result);
            }

            result = default;
            return false;
        }

        /// <inheritdoc cref = "int.TryParse(string? , out int)"/>
        /// <summary>
        /// </summary>
        /// <returns>
        /// The value created via the <see cref = "TryFromValue"/> method.
        /// </returns>
        public static global::System.Boolean TryParse(string s, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
        out Mixture result)
        {
            if (System.Int32.TryParse(s, out var r))
            {
                return TryFromValue(r, out result);
            }

            result = default;
            return false;
        }

        internal sealed class MixtureDebugView
        {
            private readonly Mixture _t;
            MixtureDebugView(Mixture t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "System.Int32";
            public System.Int32 Value => _t.Value;
            public global::System.String Conversions => @"[global::System.Text.Json.Serialization.JsonConverter(typeof(MixtureSystemTextJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(MixtureTypeConverter))]
";
        }

        internal static class ThrowHelper
        {
            internal static void ThrowCreatedWithNull() => throw new IntellenumCreationFailedException("Cannot create an Intellenum member with a null.");
            internal static void ThrowMatchFailed(string message) => throw new IntellenumMatchFailedException(message);
            internal static void ThrowMatchFailed(ReadOnlySpan<char> message) => throw new IntellenumMatchFailedException(message.ToString());
        }
    }
}
]