[  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Intellenum (https://github.com/SteveDunn/Intellenum)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618
// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036
// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097
// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669
#pragma warning disable CS1573
// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591
using Intellenum;
using System;

namespace @class
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Intellenum", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstringSystemTextJsonConverter))]
    [global::Newtonsoft.Json.JsonConverter(typeof(escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstringNewtonsoftJsonConverter))]
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstringDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.String, Value = { _value }")]
    public partial class escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring : global::System.IEquatable<escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring>, global::System.IComparable, global::System.IComparable<escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring>
    {
        // const fields...
        public const System.String OneValue = "1";
#if DEBUG
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
        private readonly global::System.Boolean _isInitialized;
        private readonly System.String _value;
        private readonly global::System.String _name;
        /// <summary>
        /// Gets the underlying <see cref = "System.String"/> value if set, otherwise default
        /// </summary>
        public System.String Value => _value;

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
            _isInitialized = false;
            _value = default;
            _name = "[UNDEFINED]";
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        public escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring(System.String value)
        {
            _value = value;
            _name = "[INFERRED-TO-BE-REPLACED!]";
            _isInitialized = true;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring(string enumName, System.String value)
        {
            _value = value;
            _name = enumName;
            _isInitialized = true;
        }

        public global::System.String Name => _name;

        public void Deconstruct(out string Name, out System.String Value)
        {
            Name = this._name;
            Value = this._value;
        }

        /// <summary>
        /// Builds a member from an enum value.
        /// </summary>
        /// <param name = "value">The value.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring FromValue(System.String value)
        {
            bool b = TryFromValue(value, out var ret);
            if (b)
            {
                return ret;
            }

            throw new IntellenumMatchFailedException($"escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring has no matching members with a value of '{value}'");
        }

        /// <summary>
        /// Tries to get a member based on value.
        /// </summary>
        /// <param name = "value">The value.</param>
        /// <param name = "member">The matching member if successful.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static bool TryFromValue(System.String value, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
        out escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring member)
        {
            switch (value)
            {
                case "1":
                    member = escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring.One;
                    return true;
                default:
                    member = default;
                    return false;
            }
        }

        /// <summary>
        /// Determines if there is a member that is defined with the specified value.
        /// </summary>
        /// <param name = "value">The value to search for.</param>
        /// <returns>True if there is a member with matching value, otherwise False.</returns>
        public static bool IsDefined(System.String value)
        {
            return value switch
            {
                "1" => true,
                _ => false
            };
        }

        /// <summary>
        /// Gets the matching member based on name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring FromName(System.String name)
        {
            if (TryFromName(name, out var ret))
            {
                return ret;
            }

            ThrowHelper.ThrowMatchFailed($"escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring has no matching members named '{name}'");
            return default;
        }

        /// <summary>
        /// Gets the matching member based on name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "ignoreCase"><c>true</c> to convert <paramref name = "name"/> in case insensitive mode; <c>false</c> to convert <paramref name = "name"/> in case sensitive mode.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring FromName(System.String name, bool ignoreCase)
        {
            StringComparison comparisonType = ignoreCase ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture;
            if (TryFromName(name, comparisonType, out var ret))
            {
                return ret;
            }

            ThrowHelper.ThrowMatchFailed($"escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring has no matching members named '{name}'");
            return default;
        }

        /// <summary>
        /// Gets the matching member based on name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "comparisonType">Comparison type to compare strings for equality during search.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring FromName(System.String name, StringComparison comparisonType)
        {
            if (TryFromName(name, comparisonType, out var ret))
            {
                return ret;
            }

            ThrowHelper.ThrowMatchFailed($"escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring has no matching members named '{name}'");
            return default;
        }

        /// <summary>
        /// Tries to get the matching member from a name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "member">The matching member if successful.</param>
        /// <returns>True if found, otherwise false.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool TryFromName(System.String name, out escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring member)
        {
            switch (name)
            {
                case ("One"):
                    member = escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring.One;
                    return true;
                default:
                    member = default;
                    return false;
            }
        }

        /// <summary>
        /// Tries to get the matching member from a name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "member">The matching member if successful.</param>
        /// <returns>True if found, otherwise false.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool TryFromName(System.String name, bool ignoreCase, out escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring member)
        {
            StringComparison comparisonType = ignoreCase ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture;
            if (string.Equals(name, "One", comparisonType))
            {
                member = escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring.One;
                return true;
            }

            member = default;
            return false;
        }

        /// <summary>
        /// Tries to get the matching member from a name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "member">The matching member if successful.</param>
        /// <returns>True if found, otherwise false.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool TryFromName(System.String name, StringComparison comparisonType, out escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring member)
        {
            if (string.Equals(name, "One", comparisonType))
            {
                member = escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring.One;
                return true;
            }

            member = default;
            return false;
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool IsNameDefined(System.String name)
        {
            return TryFromName(name, out _);
        }

        /// <summary>
        /// Gets the matching member based on name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring FromName(System.ReadOnlySpan<char> name)
        {
            if (TryFromName(name, out var ret))
            {
                return ret;
            }

            ThrowHelper.ThrowMatchFailed($"escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring has no matching members named '{name.ToString()}'");
            return default;
        }

        /// <summary>
        /// Gets the matching member based on name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "ignoreCase"><c>true</c> to convert <paramref name = "name"/> in case insensitive mode; <c>false</c> to convert <paramref name = "name"/> in case sensitive mode.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring FromName(System.ReadOnlySpan<char> name, bool ignoreCase)
        {
            StringComparison comparisonType = ignoreCase ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture;
            if (TryFromName(name, comparisonType, out var ret))
            {
                return ret;
            }

            ThrowHelper.ThrowMatchFailed($"escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring has no matching members named '{name.ToString()}'");
            return default;
        }

        /// <summary>
        /// Gets the matching member based on name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "comparisonType">Comparison type to compare strings for equality during search.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring FromName(System.ReadOnlySpan<char> name, StringComparison comparisonType)
        {
            if (TryFromName(name, comparisonType, out var ret))
            {
                return ret;
            }

            ThrowHelper.ThrowMatchFailed($"escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring has no matching members named '{name.ToString()}'");
            return default;
        }

        /// <summary>
        /// Tries to get the matching member from a name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "member">The matching member if successful.</param>
        /// <returns>True if found, otherwise false.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool TryFromName(System.ReadOnlySpan<char> name, out escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring member)
        {
            switch (name)
            {
                case ("One"):
                    member = escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring.One;
                    return true;
                default:
                    member = default;
                    return false;
            }
        }

        /// <summary>
        /// Tries to get the matching member from a name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "member">The matching member if successful.</param>
        /// <returns>True if found, otherwise false.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool TryFromName(System.ReadOnlySpan<char> name, bool ignoreCase, out escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring member)
        {
            StringComparison comparisonType = ignoreCase ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture;
            if (MemoryExtensions.Equals(name, "One".AsSpan(), comparisonType))
            {
                member = escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring.One;
                return true;
            }

            member = default;
            return false;
        }

        /// <summary>
        /// Tries to get the matching member from a name.
        /// </summary>
        /// <param name = "name">The name.</param>
        /// <param name = "member">The matching member if successful.</param>
        /// <returns>True if found, otherwise false.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool TryFromName(System.ReadOnlySpan<char> name, StringComparison comparisonType, out escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring member)
        {
            if (MemoryExtensions.Equals(name, "One".AsSpan(), comparisonType))
            {
                member = escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring.One;
                return true;
            }

            member = default;
            return false;
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool IsNameDefined(System.ReadOnlySpan<char> name)
        {
            return TryFromName(name, out _);
        }

        // A placeholder method used by the source generator during compilation so that
        // users can 'Call' it. The source generator examines calls to this in order to 
        // generate physical members (e.g. public static readonly MyEnum Item1 = new...)
        private static void Member(string name, System.String value)
        {
        }

        // A placeholder method used by the source generator during compilation so that
        // users can 'Call' it. The source generator examines calls to this in order to 
        // generate physical members (e.g. public static readonly MyEnum Item1 = new...)
        private static void Member(string name)
        {
        }

        // A placeholder method used by the source generator during compilation so that
        // users can 'Call' it. The source generator examines calls to this in order to 
        // generate physical members (e.g. public static readonly MyEnum Item1 = new...)
        /// <summary>
        /// Sets up members using just the name. For ints, the values are 0 to n, and for strings,
        /// the values are the names. 
        /// The input is a comma separated string, e.g. ""Silver, Gold, Diamond"". The individual
        /// items are trimmed of whitespace. 
        /// </summary>
        private static void Members(string csv)
        {
        }

        // only called internally when something has been deserialized into
        // its primitive type.
        private static escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring __Deserialize(System.String value)
        {
            if (value is null)
            {
                ThrowHelper.ThrowCreatedWithNull();
            }

            if (value == One.Value)
                return One;
            return FromValue(value);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public global::System.Boolean Equals(escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized members via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized members of this type.
            if (!_isInitialized || !other._isInitialized)
                return false;
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(Value, other.Value);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public override global::System.Boolean Equals(global::System.Object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring)obj);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator ==(escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring left, escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring right) => Equals(left, right);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator !=(escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring left, escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring right) => !Equals(left, right);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator ==(escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring left, System.String right) => Equals(left.Value, right);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator !=(escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring left, System.String right) => !Equals(left.Value, right);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator ==(System.String left, escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring right) => Equals(left, right.Value);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator !=(System.String left, escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring right) => !Equals(left, right.Value);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static explicit operator escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring(System.String value) => FromValue(value);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static implicit operator System.String(escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring value) => value.Value;
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public int CompareTo(escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring other) => Value.CompareTo(other);
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator <(escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring left, escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring right) => left.CompareTo(right) < 0;
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator <=(escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring left, escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring right) => left.CompareTo(right) <= 0;
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator>(escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring left, escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring right) => left.CompareTo(right) > 0;
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator >=(escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring left, escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring right) => left.CompareTo(right) >= 0;
        public int CompareTo(object other)
        {
            if (other is null)
                return 1;
            if (other is escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring x)
                return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring", nameof(other));
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public override global::System.Int32 GetHashCode() => GetType().GetHashCode() ^ this._value.GetHashCode();
        // member...
        public static readonly escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring One = new escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring("One", "1");
        public static global::System.Collections.Generic.IEnumerable<escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring> List()
        {
            yield return One;
        }

        /// <summary>Returns the name of the enum.</summary>
        public override global::System.String ToString() => _name;
        /// <summary>
        /// Converts an Intellenum instance to or from JSON.
        /// </summary>
        public class escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstringSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring>
        {
            public override escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring.__Deserialize(reader.GetString());
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteStringValue(value.Value);
            }
#if NET6_0_OR_GREATER
            public override escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring.__Deserialize(reader.GetString());
            }

            public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WritePropertyName(value.Value);
            }
#endif
        }

        class escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstringNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = (escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring)value;
                serializer.Serialize(writer, id.Value);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                var result = serializer.Deserialize<global::System.String>(reader);
                return result is not null ? escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring.__Deserialize(result) : null;
            }
        }

        internal sealed class escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstringDebugView
        {
            private readonly escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring _t;
            escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstringDebugView(escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstring t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "System.String";
            public System.String Value => _t.Value;
            public global::System.String Conversions => @"[global::System.Text.Json.Serialization.JsonConverter(typeof(escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstringSystemTextJsonConverter))]
[global::Newtonsoft.Json.JsonConverter(typeof(escapedTestspublic_partial_classConversions_NewtonsoftJson___Conversions_SystemTextJsonstringNewtonsoftJsonConverter))]
";
        }

        internal static class ThrowHelper
        {
            internal static void ThrowCreatedWithNull() => throw new IntellenumCreationFailedException("Cannot create an Intellenum member with a null.");
            internal static void ThrowMatchFailed(string message) => throw new IntellenumMatchFailedException(message);
            internal static void ThrowMatchFailed(ReadOnlySpan<char> message) => throw new IntellenumMatchFailedException(message.ToString());
        }
    }
}
]